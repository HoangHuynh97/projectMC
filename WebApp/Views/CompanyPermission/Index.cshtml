<div class="page-container">
   <div class="page-header grid-middle">
      <div class="mr img roles"></div>
      <div class="title">
         @H("Phân quyền sử dụng")
      </div>
   </div>
   <div class="page-content">
      <form>@Html.Partial("IndexPartial")</form>
   </div>
</div>

<script type="text/javascript">
   WebApp.function = {
      title: '@H("Phân quyền sử dụng")',
      permission: {
         add: @CheckPermission("Thêm").ToString().ToLower(),
         edit: @CheckPermission("Sửa").ToString().ToLower(),
         del: @CheckPermission("Xóa").ToString().ToLower(),
      },
      add: function () {
         if (WebApp.loading() || !WebApp.function.permission.add) return;
         WebApp.showDialog({
            title: '@H("Thêm quyền sử dụng")',
            url: '@Url.Action("Add")',
            width: 800,
            init: function () { Name.Focus(); },
            beforeSubmit: function () {
               var v = WebApp.function.getPermission();
               $('#PermissionStr').val(v.join(';'));
               var r = WebApp.function.getReports();
               $('#ReportStr').val(r.join(';'));
            }
         }).done(function(v) {
            grdSheet.PerformCallback();
         });
      },
      edit: function () {
         if (WebApp.loading() || !WebApp.function.permission.edit) return;
         var idx = grdSheet.GetFocusedRowIndex();
         var id = grdSheet.GetRowKey(idx);
         if (!id) return;
         WebApp.showDialog({
            title: '@H("Cập nhật quyền sử dụng")',
            icon: '@IconID.EditEdit32x32',
            url: '@Url.Action("Edit")',
            data: { id: id },
            width: 800,
            init: function () { Name.Focus(); },
            beforeSubmit: function () {
               var v = WebApp.function.getPermission();
               $('#PermissionStr').val(v.join(';'));
               var r = WebApp.function.getReports();
               $('#ReportStr').val(r.join(';'));
            }
         }).done(function (v) {
            grdSheet.PerformCallback();
         });
      },
      del: function () {
         if (WebApp.loading() || !WebApp.function.permission.del) return;
         var idx = grdSheet.GetFocusedRowIndex();
         var id = grdSheet.GetRowKey(idx);
         if (!id) return;
         WebApp.showConfirm(WebApp.message.delete, WebApp.message.deleteConfirm).done(function (r) {
            WebApp.ajax('@Url.Action("Delete")', {id: id}).done(function() {
               grdSheet.PerformCallback();
            });
         });
      },
      export: function () {
         window.open('@Url.Action("Export")');
      },
      filter: function () {
         grdSheet._showFilter = !(grdSheet._showFilter || false);
         grdSheet.PerformCallback();
      },
      hotkey: {
         f2: function() { WebApp.function.add(); },
         f3: function() { WebApp.function.edit(); },
         f4: function() { WebApp.function.del(); },
         f5: function () { grdSheet.PerformCallback(); },
         esc: function () { WebApp.function.close(); },
      },
      resize: function () {
         $('.page-content').height($('.page-container').height() - $('.page-header').height());
         grdSheet.SetHeight($('.page-content').innerHeight());
      },
      close: WebApp.closeFunction.bind(WebApp),
      update: function() {
         var idx = grdSheet.GetFocusedRowIndex();
         var tool = grdSheet.GetToolbar(0);
         WebApp.function.permission.edit && tool.GetItemByName("edit").SetEnabled(idx !== -1);
         WebApp.function.permission.del && tool.GetItemByName("del").SetEnabled(idx !== -1);
      },
      Permission_Changed: function (s, e) {
         //set checked childs
         var b = e.node.GetChecked();
         function setChilds(nodes) {
            for (var i = 0; i < nodes.length; i++) {
               nodes[i].SetChecked(b);
               setChilds(nodes[i].nodes);
            }
         }
         setChilds(e.node.nodes);
         if (b && e.node.parent && e.node.parent.name)
            e.node.parent.SetChecked(true);
         setTimeout(function () {
            WebApp.function.refreshCheckState();
         });
      },
      refreshCheckState: function (sender, args) {
         //refesh state for tab, group nodes
         for (var i = 0; i < treePermission.rootNode.nodes.length; i++) {
            var tab = treePermission.rootNode.nodes[i];
            var tabAll = true;
            var tabCheck = false;
            for (var j = 0; j < tab.nodes.length; j++) {
               var group = tab.nodes[j];
               var groupAll = true;
               var groupCheck = false;
               for (var k = 0; k < group.nodes.length; k++) {
                  var func = group.nodes[k];
                  if (func.GetChecked())
                     groupCheck = true;
                  else
                     groupAll = false;
               }
               if (groupAll)
                  group.SetCheckState('Checked');
               else if (groupCheck)
                  group.SetCheckState('Indeterminate');
               else
                  group.SetCheckState('Unchecked');

               if (groupCheck)
                  tabCheck = true;
               else
                  tabAll = false;
            }
            if (tabAll)
               tab.SetCheckState('Checked');
            else if (tabCheck)
               tab.SetCheckState('Indeterminate');
            else
               tab.SetCheckState('Unchecked');
         }
      },
      getPermission: function () {
         //get string array data of checked nodes
         var result = [];
         for (var i = 0; i < treePermission.rootNode.nodes.length; i++) {
            var tab = treePermission.rootNode.nodes[i];
            if (tab.GetCheckState() === 'Unchecked') continue;
            for (var j = 0; j < tab.nodes.length; j++) {
               var group = tab.nodes[j];
               if (group.GetCheckState() === 'Unchecked') continue;
               for (var k = 0; k < group.nodes.length; k++) {
                  var func = group.nodes[k];
                  if (func.GetCheckState() === 'Unchecked') continue;
                  var s = [];
                  for (var l = 0; l < func.nodes.length; l++) {
                     var logic = func.nodes[l];
                     if (logic.GetChecked())
                        s.push(logic.name);
                  }
                  result.push(func.name + '/' + s.join(','));
               }
            }
         }
         return result;
      },
      getReports: function () {
         var result = [];
         if (window.treeReports) {
            for (var i = 0; i < treeReports.rootNode.nodes.length; i++) {
               var cat = treeReports.rootNode.nodes[i];
               if (cat.GetCheckState() === 'Unchecked') continue;
               for (var j = 0; j < cat.nodes.length; j++) {
                  var r = cat.nodes[j];
                  if (r.GetCheckState() === 'Unchecked') continue;
                  result.push(r.name);
               }
            }
         }
         return result;
      }
   };
</script>
