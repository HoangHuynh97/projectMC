#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.UI.WebControls;
    using System.Web.WebPages;
    using DevExpress.Utils;
    using DevExpress.Web;
    using DevExpress.Web.ASPxThemes;
    using DevExpress.Web.Mvc;
    using DevExpress.Web.Mvc.UI;
    using WebApp.Models;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Permission/EditTemplate.cshtml")]
    public partial class _Views_Permission_EditTemplate_cshtml : WebApp.Core.BaseWebViewPage<PermissionModel>
    {
        public _Views_Permission_EditTemplate_cshtml()
        {
        }
        public override void Execute()
        {
            
            #line 3 "..\..\Views\Permission\EditTemplate.cshtml"
Write(Html.HiddenFor(m => m.Id));

            
            #line default
            #line hidden
WriteLiteral("\r\n");

            
            #line 4 "..\..\Views\Permission\EditTemplate.cshtml"
Write(Html.HiddenFor(m => m.PermissionStr));

            
            #line default
            #line hidden
WriteLiteral("\r\n");

            
            #line 5 "..\..\Views\Permission\EditTemplate.cshtml"
Write(Html.HiddenFor(m => m.ReportStr));

            
            #line default
            #line hidden
WriteLiteral("\r\n<div");

WriteLiteral(" class=\"grid\"");

WriteLiteral(">\r\n");

            
            #line 7 "..\..\Views\Permission\EditTemplate.cshtml"
   
            
            #line default
            #line hidden
            
            #line 7 "..\..\Views\Permission\EditTemplate.cshtml"
    if (Model.Company == null)
   {

            
            #line default
            #line hidden
WriteLiteral("      <div");

WriteLiteral(" class=\"col-6_xs-12\"");

WriteLiteral(">\r\n");

WriteLiteral("         ");

            
            #line 10 "..\..\Views\Permission\EditTemplate.cshtml"
    Write(Html.EditorFor(m => m.Name));

            
            #line default
            #line hidden
WriteLiteral("\r\n      </div>\r\n");

WriteLiteral("      <div");

WriteLiteral(" class=\"col-6_xs-12-middle\"");

WriteLiteral(" style=\"padding-bottom: 0;\"");

WriteLiteral(">\r\n");

WriteLiteral("         ");

            
            #line 13 "..\..\Views\Permission\EditTemplate.cshtml"
    Write(Html.EditorFor(m => m.System));

            
            #line default
            #line hidden
WriteLiteral("\r\n      </div>\r\n");

            
            #line 15 "..\..\Views\Permission\EditTemplate.cshtml"
   }
   else
   {

            
            #line default
            #line hidden
WriteLiteral("      <div");

WriteLiteral(" class=\"col-12\"");

WriteLiteral(">\r\n");

WriteLiteral("         ");

            
            #line 19 "..\..\Views\Permission\EditTemplate.cshtml"
    Write(Html.EditorFor(m => m.Name));

            
            #line default
            #line hidden
WriteLiteral("\r\n      </div>\r\n");

            
            #line 21 "..\..\Views\Permission\EditTemplate.cshtml"
   }

            
            #line default
            #line hidden
WriteLiteral("   <div");

WriteLiteral(" class=\"col-12\"");

WriteLiteral(">\r\n");

WriteLiteral("      ");

            
            #line 23 "..\..\Views\Permission\EditTemplate.cshtml"
 Write(Html.EditorFor(m => m.Note));

            
            #line default
            #line hidden
WriteLiteral("\r\n   </div>\r\n</div>\r\n<div");

WriteLiteral(" class=\"mb\"");

WriteLiteral(">\r\n");

WriteLiteral("   ");

            
            #line 27 "..\..\Views\Permission\EditTemplate.cshtml"
Write(Html.DevExpress().TabControl(st =>
{
   st.Name = "tabPermission";
   st.Width = Unit.Percentage(100);
   st.Tabs.Add(T("Quyền sử dụng chức năng"));
   st.Tabs.Add(T("Quyền xem báo cáo"));
   st.ClientSideEvents.ActiveTabChanged = "function(s,e) {$('.tabpermission-container').toggle();}";
}).GetHtml());

            
            #line default
            #line hidden
WriteLiteral("\r\n</div>\r\n<div");

WriteLiteral(" class=\"tabpermission-container\"");

WriteLiteral(" style=\"height: 200px; overflow: auto;\"");

WriteLiteral(">\r\n");

WriteLiteral("   ");

            
            #line 37 "..\..\Views\Permission\EditTemplate.cshtml"
Write(Html.DevExpress().TreeView(st =>
{
   st.Name = "treePermission";
   st.Width = Unit.Percentage(100);
   st.AllowCheckNodes = true;
   st.ShowTreeLines = false;
   foreach (var tab in WebApp.Core.Menu.GetUserMenu())
   {
      var nTab = new MVCxTreeViewNode(T(tab.Name));
      nTab.Expanded = true;
      nTab.Image.IconID = IconID.BusinessobjectsBofolder32x32;
      foreach (var group in tab.Groups)
      {
         var nGroup = new MVCxTreeViewNode(T(group.Name));
         nGroup.Image.IconID = IconID.BusinessobjectsBofolder32x32;
         foreach (var func in group.Functions)
         {
            var nFunc = new MVCxTreeViewNode(T(func.Name), func.Module + "/" + func.Function);
            if (!string.IsNullOrEmpty(func.Image))
               nFunc.Image.SpriteProperties.CssClass = "img " + func.Image;
            else if (!string.IsNullOrEmpty(func.Icon))
               nFunc.Image.IconID = func.Icon;
            var s = Model.Permissions.FirstOrDefault(p => p.StartsWith(nFunc.Name));
            var l = new List<string>();
            if (!string.IsNullOrEmpty(s))
            {
               nFunc.Checked = true;
               s = s.Replace(nFunc.Name + "/", "");
               l = s.Split(',').ToList();
            }
            foreach (var logic in WebApp.Core.Menu.Functions[func.Module][func.Function].Logics)
            {
               var nLogic = new MVCxTreeViewNode(T(logic), logic);
               nLogic.Checked = l.Contains(logic);
               nFunc.Nodes.Add(nLogic);
            }
            nGroup.Nodes.Add(nFunc);
         }
         nTab.Nodes.Add(nGroup);
      }
      st.Nodes.Add(nTab);
   }

   st.ClientSideEvents.Init = "WebApp.function.refreshCheckState";
   st.ClientSideEvents.CheckedChanged = "WebApp.function.Permission_Changed";
}).GetHtml());

            
            #line default
            #line hidden
WriteLiteral("\r\n</div>\r\n<div");

WriteLiteral(" class=\"tabpermission-container\"");

WriteLiteral(" style=\"display: none; height: 200px; overflow: auto;\"");

WriteLiteral(">\r\n");

WriteLiteral("   ");

            
            #line 85 "..\..\Views\Permission\EditTemplate.cshtml"
Write(Html.DevExpress().TreeView(st =>
{
   st.Name = "treeReports";
   st.Width = Unit.Percentage(100);
   st.AllowCheckNodes = true;
   st.ShowTreeLines = false;
   st.CheckNodesRecursive = true;
   st.EnableClientSideAPI = true;
   foreach(var cat in WebApp.Core.Menu.GetUserReports())
   {
      var nCat = new MVCxTreeViewNode(T(cat.Key));
      nCat.Image.IconID = IconID.BusinessobjectsBofolder32x32;
      nCat.Expanded = true;
      foreach(var r in cat.Value)
      {
         var nRpt = new MVCxTreeViewNode(T(r.Value));
         nRpt.Name = r.Key.ToString();
         nRpt.Checked = Model.Reports.Contains(r.Key);
         nCat.Nodes.Add(nRpt);
      }
      st.Nodes.Add(nCat);
   }
}).GetHtml());

            
            #line default
            #line hidden
WriteLiteral("\r\n</div>");

        }
    }
}
#pragma warning restore 1591
