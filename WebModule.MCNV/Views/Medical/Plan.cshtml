@model MedicalPlan

<script id="dxss_medicalplan">
   function onMedicalPlanSave() {
      if (!WebApp.validForm('#frmMedicalPlan')) return;
      var data = getPlanData();
      for (let d of data.Details) {
         if (!d.Deleted && (!d.PlanDate || !d.Doctor || !d.Specifications ||
            (d.PlanDate && d.EndDate && ASPx.Formatter.GetDateFormatter().Parse(d.EndDate) < ASPx.Formatter.GetDateFormatter().Parse(d.PlanDate))
         )) {
            WebApp.showInfo('@H("Lỗi")', '@H("Dữ liệu lập kế hoạch can thiệp không hợp lệ")');
            return;
         }
      }
      if (!AttachmentListMedicalPlan.GetVisibleRowsOnPage()) {
         WebApp.showInfo('@H("Lỗi")', '@H("Vui lòng cập nhật tài liệu, hình ảnh, video kèm theo!")');
         return;
      }
      MedicalPlanSave.SetEnabled(false);
      WebApp.ajax('@Url.Action("Plan", "Medical")', data).done(function (r) {
         processModel.reload();
      }).fail(function () { MedicalPlanSave.SetEnabled(true); });
   }

   function getPlanData() {
      //use text of date instead
      var details = grdMedicalPlan.GetChanged();
      for (let d of details) {
         var v = grdMedicalPlan.batchEditApi.GetCellValueByKey(d.Id, 'PlanDate');
         d.PlanDate = v && ASPx.Formatter.GetDateFormatter().Format(v) || '';
         v = grdMedicalPlan.batchEditApi.GetCellValueByKey(d.Id, 'EndDate');
         d.EndDate = v && ASPx.Formatter.GetDateFormatter().Format(v) || '';
      }
      return {
         Id: processModel.id,
         PlanDate: PlanDate.GetText(),
         PlanGoal: PlanGoal.GetValue(),
         PlanNote: PlanNote.GetValue(),
         Details: details,
         Attachments: { Items: AttachmentListMedicalPlan.GetChanged(), },
         Doctors: { Items: DoctorsMedicalPlan.GetSelectedValues().map(function (id) { return { Id: id }; }), Facility: @(Model.Doctors.Facility) },
      };
   }

   function onMedicalPlanAdd() {
      grdMedicalPlan.AddNewItem();
   }

   function grdMedicalPlanValidating(grid, e) {
      if (grdMedicalPlan.batchEditHelper.deletedItemKeys.indexOf(e.key) != -1) return;
      var v = e.validationInfo[grid.GetColumnByField("PlanDate").index];
      if (!v.value) {
         v.isValid = false;
         v.errorText = '@H("Không được để trống")';
      } else {
         const begin = v.value;
         v = e.validationInfo[grid.GetColumnByField("EndDate").index];
         if (v.value && v.value < begin) {
            v.isValid = false;
            v.errorText = '@H("Ngày kết thúc phải lớn hơn ngày bắt đầu")';
         }
      }
      v = e.validationInfo[grid.GetColumnByField("Doctor").index];
      if (!v.value) {
         v.isValid = false;
         v.errorText = '@H("Không được để trống")';
      }
      v = e.validationInfo[grid.GetColumnByField("Specifications").index];
      if (!v.value) {
         v.isValid = false;
         v.errorText = '@H("Không được để trống")';
      }
   }

   function grdMedicalPlanEndEditing(grid, e) {
      const sel = cmbDoctor.GetSelectedItem();
      if (sel && !e.cancel && e.focusedColumn.fieldName == 'Doctor') {
         grid.batchEditApi.SetCellValue(e.visibleIndex, 'Specialize', sel.texts[1]);
      }
   }

   setTimeout(function () {
      WebApp.validateForm('#frmMedicalPlan');
      var oldData = JSON.stringify(getPlanData());

      [PlanDate, PlanGoal, PlanNote].forEach(function (it) {
         it.ValueChanged.AddHandler(function () {
            var d = JSON.stringify(getPlanData());
            MedicalPlanSave.SetVisible(d != oldData);
         });
      });
      AttachmentListMedicalPlan.onDataChanged = function (data) {
         var d = JSON.stringify(getPlanData());
         MedicalPlanSave.SetVisible(d != oldData);
      };
      DoctorsMedicalPlan.SelectedIndexChanged.AddHandler(function () {
         var d = JSON.stringify(getPlanData());
         MedicalPlanSave.SetVisible(d != oldData);
      });
      [grdMedicalPlan.BatchEditEndEditing, grdMedicalPlan.BatchEditRowDeleting, grdMedicalPlan.BatchEditRowRecovering].forEach(function (it) {
         it.AddHandler(function () {
            setTimeout(function () {
               var d = JSON.stringify(getPlanData());
               MedicalPlanSave.SetVisible(d != oldData);
            });
         });
      });
   });

</script>

<form id="frmMedicalPlan">
   <div class="grid">
      <div class="col-3_xs-12">@Html.EditorFor(m => m.PlanDate)</div>
      <div class="col-12">@Html.EditorFor(m => m.PlanGoal)</div>
      <div class="col-12 grid-middle-noBottom mb">
         <div class="col-auto">@H("Lập kế hoạch can thiệp")</div>
         <div class="col">
            @Html.DevExpress().Button(btn =>
       {
          btn.Name = "btnMedicalPlanAdd";
          btn.Text = T("Thêm");
          btn.Images.Image.IconID = IconID.ActionsAdd16x16;
          btn.Styles.Style.Paddings.Padding = 0;
          btn.RenderMode = ButtonRenderMode.Outline;
          btn.ClientSideEvents.Click = "onMedicalPlanAdd";
       }).GetHtml()
         </div>
      </div>
      <div class="col-12">
         @Html.DevExpress().GridView(st =>
    {
       st.Name = "grdMedicalPlan";
       st.Width = Unit.Percentage(100);
       st.SettingsEditing.Mode = GridViewEditingMode.Batch;
       st.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Cell;
       st.SettingsEditing.BatchEditSettings.ShowConfirmOnLosingChanges = false;
       st.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.FocusedCellClick;
       st.SettingsEditing.ShowModelErrorsForEditors = true;
       st.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
       st.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
       st.KeyFieldName = "Id";
       st.SettingsBehavior.AllowSort = false;
       st.SettingsEditing.NewItemRowPosition = GridViewNewItemRowPosition.Bottom;
       st.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
       st.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = WidthAdaptivity;
       if (WindowWidthType == WebApp.Constant.WindowWidth.WidthType.ExtraSmall)
          st.Settings.ShowColumnHeaders = false;

       st.CommandColumn.Visible = true;
       st.CommandColumn.Caption = " ";
       st.CommandColumn.ShowDeleteButton = true;
       st.CommandColumn.Width = 24;
       st.CommandColumn.VisibleIndex = 5;
       st.SettingsCommandButton.RenderMode = GridCommandButtonRenderMode.Link;
       st.SettingsCommandButton.DeleteButton.Text = " ";
       st.SettingsCommandButton.DeleteButton.Image.IconID = IconID.ActionsTrash16x16;
       st.SettingsCommandButton.RecoverButton.Text = " ";
       st.SettingsCommandButton.RecoverButton.Image.IconID = IconID.ActionsReset16x16office2013;

       st.Columns.Add(col =>
       {
          col.FieldName = "PlanDate";
          col.ColumnType = MVCxGridViewColumnType.DateEdit;
          col.PropertiesEdit.DisplayFormatString = "d";
          col.Caption = T("Ngày bắt đầu");
          col.Width = 120;
          col.EditorProperties().DateEdit(cmb =>
          {
             cmb.Width = Unit.Percentage(100);
             cmb.ValidationSettings.Display = Display.Dynamic;
             cmb.MinDate = Model.MinDate;
          });
       });
       st.Columns.Add(col =>
       {
          col.FieldName = "EndDate";
          col.ColumnType = MVCxGridViewColumnType.DateEdit;
          col.PropertiesEdit.DisplayFormatString = "d";
          col.Caption = T("Ngày kết thúc");
          col.Width = 120;
          col.EditorProperties().DateEdit(cmb =>
          {
             cmb.Width = Unit.Percentage(100);
             cmb.ValidationSettings.Display = Display.Dynamic;
             cmb.MinDate = Model.MinDate;
          });
       });
       st.Columns.Add(col =>
       {
          col.FieldName = "Doctor";
          col.ColumnType = MVCxGridViewColumnType.ComboBox;
          col.Caption = T("Cán bộ thực hiện");
          col.Width = 200;
          col.EditorProperties().ComboBox(cmb =>
          {
             cmb.ClientInstanceName = "cmbDoctor";
             cmb.Width = Unit.Percentage(100);
             cmb.ValidationSettings.Display = Display.Dynamic;
             cmb.ValueField = "Oid";
             cmb.ValueType = typeof(int);
             cmb.TextField = "Name";
             cmb.TextFormatString = "{0}";
             cmb.Columns.Add("Name", T("Họ và tên")).Width = 200;
             cmb.Columns.Add("Specialize", T("Lĩnh vực chuyên môn")).Width = 200;
             cmb.IncrementalFilteringDelay = 1000;
             cmb.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
             cmb.BindList(Model.GetDoctors());
          });
       });
       st.Columns.Add(col =>
       {
          col.FieldName = "Specialize";
          col.Caption = T("Lĩnh vực chuyên môn");
          col.Width = 200;
          col.ReadOnly = true;
          col.Settings.ShowEditorInBatchEditMode = false;
       });
       st.Columns.Add(col =>
       {
          col.FieldName = "Specifications";
          col.ColumnType = MVCxGridViewColumnType.TokenBox;
          col.Caption = T("Chỉ định kỹ thuật");
          col.EditorProperties().TokenBox(cmb =>
          {
             cmb.Width = Unit.Percentage(100);
             cmb.ValidationSettings.Display = Display.Dynamic;
             cmb.ValueSeparator = ';';
             cmb.BindList(Model.GetSpecifications());
             cmb.IncrementalFilteringDelay = 1000;
             cmb.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
          });
       });

       st.ClientSideEvents.BatchEditRowValidating = "grdMedicalPlanValidating";
       st.ClientSideEvents.BatchEditEndEditing = "grdMedicalPlanEndEditing";
    }).Bind(Model.Details).GetHtml()
      </div>
      <div class="col-12">@Html.EditorFor(m => m.PlanNote)</div>
      <div class="col-12">@Html.EditorFor(m => m.Doctors)</div>
      <div class="col-12">@Html.EditorFor(m => m.Attachments)</div>
   </div>
   <div>
      @Html.DevExpress().Button(btn =>
{
 btn.Name = "MedicalPlanSave";
 btn.Text = T("Lưu thay đổi");
 btn.Images.Image.IconID = IconID.SaveSave16x16;
 btn.Styles.Style.Paddings.Padding = 0;
 btn.RenderMode = ButtonRenderMode.Outline;
 btn.ClientVisible = false;
 btn.ClientSideEvents.Click = "onMedicalPlanSave";
}).GetHtml()
   </div>

</form>