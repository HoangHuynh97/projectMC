#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.UI.WebControls;
    using System.Web.WebPages;
    using DevExpress.Utils;
    using DevExpress.Web;
    using DevExpress.Web.ASPxThemes;
    using DevExpress.Web.Mvc;
    using DevExpress.Web.Mvc.UI;
    using WebModule.MCNV.Models;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Medical/Plan.cshtml")]
    public partial class _Views_Medical_Plan_cshtml : WebApp.Core.BaseWebViewPage<MedicalPlan>
    {
        public _Views_Medical_Plan_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("<script");

WriteLiteral(" id=\"dxss_medicalplan\"");

WriteLiteral(@">
   function onMedicalPlanSave() {
      if (!WebApp.validForm('#frmMedicalPlan')) return;
      var data = getPlanData();
      for (let d of data.Details) {
         if (!d.Deleted && (!d.PlanDate || !d.Doctor || !d.Specifications ||
            (d.PlanDate && d.EndDate && ASPx.Formatter.GetDateFormatter().Parse(d.EndDate) < ASPx.Formatter.GetDateFormatter().Parse(d.PlanDate))
         )) {
            WebApp.showInfo('");

            
            #line 11 "..\..\Views\Medical\Plan.cshtml"
                        Write(H("Lỗi"));

            
            #line default
            #line hidden
WriteLiteral("\', \'");

            
            #line 11 "..\..\Views\Medical\Plan.cshtml"
                                     Write(H("Dữ liệu lập kế hoạch can thiệp không hợp lệ"));

            
            #line default
            #line hidden
WriteLiteral("\');\r\n            return;\r\n         }\r\n      }\r\n      if (!AttachmentListMedicalPl" +
"an.GetVisibleRowsOnPage()) {\r\n         WebApp.showInfo(\'");

            
            #line 16 "..\..\Views\Medical\Plan.cshtml"
                     Write(H("Lỗi"));

            
            #line default
            #line hidden
WriteLiteral("\', \'");

            
            #line 16 "..\..\Views\Medical\Plan.cshtml"
                                  Write(H("Vui lòng cập nhật tài liệu, hình ảnh, video kèm theo!"));

            
            #line default
            #line hidden
WriteLiteral("\');\r\n         return;\r\n      }\r\n      MedicalPlanSave.SetEnabled(false);\r\n      W" +
"ebApp.ajax(\'");

            
            #line 20 "..\..\Views\Medical\Plan.cshtml"
              Write(Url.Action("Plan", "Medical"));

            
            #line default
            #line hidden
WriteLiteral(@"', data).done(function (r) {
         processModel.reload();
      }).fail(function () { MedicalPlanSave.SetEnabled(true); });
   }

   function getPlanData() {
      //use text of date instead
      var details = grdMedicalPlan.GetChanged();
      for (let d of details) {
         var v = grdMedicalPlan.batchEditApi.GetCellValueByKey(d.Id, 'PlanDate');
         d.PlanDate = v && ASPx.Formatter.GetDateFormatter().Format(v) || '';
         v = grdMedicalPlan.batchEditApi.GetCellValueByKey(d.Id, 'EndDate');
         d.EndDate = v && ASPx.Formatter.GetDateFormatter().Format(v) || '';
      }
      return {
         Id: processModel.id,
         PlanDate: PlanDate.GetText(),
         PlanGoal: PlanGoal.GetValue(),
         PlanNote: PlanNote.GetValue(),
         Details: details,
         Attachments: { Items: AttachmentListMedicalPlan.GetChanged(), },
         Doctors: { Items: DoctorsMedicalPlan.GetSelectedValues().map(function (id) { return { Id: id }; }), Facility: ");

            
            #line 41 "..\..\Views\Medical\Plan.cshtml"
                                                                                                                   Write(Model.Doctors.Facility);

            
            #line default
            #line hidden
WriteLiteral(@" },
      };
   }

   function onMedicalPlanAdd() {
      grdMedicalPlan.AddNewItem();
   }

   function grdMedicalPlanValidating(grid, e) {
      if (grdMedicalPlan.batchEditHelper.deletedItemKeys.indexOf(e.key) != -1) return;
      var v = e.validationInfo[grid.GetColumnByField(""PlanDate"").index];
      if (!v.value) {
         v.isValid = false;
         v.errorText = '");

            
            #line 54 "..\..\Views\Medical\Plan.cshtml"
                   Write(H("Không được để trống"));

            
            #line default
            #line hidden
WriteLiteral("\';\r\n      } else {\r\n         const begin = v.value;\r\n         v = e.validationInf" +
"o[grid.GetColumnByField(\"EndDate\").index];\r\n         if (v.value && v.value < be" +
"gin) {\r\n            v.isValid = false;\r\n            v.errorText = \'");

            
            #line 60 "..\..\Views\Medical\Plan.cshtml"
                      Write(H("Ngày kết thúc phải lớn hơn ngày bắt đầu"));

            
            #line default
            #line hidden
WriteLiteral("\';\r\n         }\r\n      }\r\n      v = e.validationInfo[grid.GetColumnByField(\"Doctor" +
"\").index];\r\n      if (!v.value) {\r\n         v.isValid = false;\r\n         v.error" +
"Text = \'");

            
            #line 66 "..\..\Views\Medical\Plan.cshtml"
                   Write(H("Không được để trống"));

            
            #line default
            #line hidden
WriteLiteral("\';\r\n      }\r\n      v = e.validationInfo[grid.GetColumnByField(\"Specifications\").i" +
"ndex];\r\n      if (!v.value) {\r\n         v.isValid = false;\r\n         v.errorText" +
" = \'");

            
            #line 71 "..\..\Views\Medical\Plan.cshtml"
                   Write(H("Không được để trống"));

            
            #line default
            #line hidden
WriteLiteral(@"';
      }
   }

   function grdMedicalPlanEndEditing(grid, e) {
      const sel = cmbDoctor.GetSelectedItem();
      if (sel && !e.cancel && e.focusedColumn.fieldName == 'Doctor') {
         grid.batchEditApi.SetCellValue(e.visibleIndex, 'Specialize', sel.texts[1]);
      }
   }

   setTimeout(function () {
      WebApp.validateForm('#frmMedicalPlan');
      var oldData = JSON.stringify(getPlanData());

      [PlanDate, PlanGoal, PlanNote].forEach(function (it) {
         it.ValueChanged.AddHandler(function () {
            var d = JSON.stringify(getPlanData());
            MedicalPlanSave.SetVisible(d != oldData);
         });
      });
      AttachmentListMedicalPlan.onDataChanged = function (data) {
         var d = JSON.stringify(getPlanData());
         MedicalPlanSave.SetVisible(d != oldData);
      };
      DoctorsMedicalPlan.SelectedIndexChanged.AddHandler(function () {
         var d = JSON.stringify(getPlanData());
         MedicalPlanSave.SetVisible(d != oldData);
      });
      [grdMedicalPlan.BatchEditEndEditing, grdMedicalPlan.BatchEditRowDeleting, grdMedicalPlan.BatchEditRowRecovering].forEach(function (it) {
         it.AddHandler(function () {
            setTimeout(function () {
               var d = JSON.stringify(getPlanData());
               MedicalPlanSave.SetVisible(d != oldData);
            });
         });
      });
   });

</script>

<form");

WriteLiteral(" id=\"frmMedicalPlan\"");

WriteLiteral(">\r\n   <div");

WriteLiteral(" class=\"grid\"");

WriteLiteral(">\r\n      <div");

WriteLiteral(" class=\"col-3_xs-12\"");

WriteLiteral(">");

            
            #line 114 "..\..\Views\Medical\Plan.cshtml"
                          Write(Html.EditorFor(m => m.PlanDate));

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n      <div");

WriteLiteral(" class=\"col-12\"");

WriteLiteral(">");

            
            #line 115 "..\..\Views\Medical\Plan.cshtml"
                     Write(Html.EditorFor(m => m.PlanGoal));

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n      <div");

WriteLiteral(" class=\"col-12 grid-middle-noBottom mb\"");

WriteLiteral(">\r\n         <div");

WriteLiteral(" class=\"col-auto\"");

WriteLiteral(">");

            
            #line 117 "..\..\Views\Medical\Plan.cshtml"
                          Write(H("Lập kế hoạch can thiệp"));

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n         <div");

WriteLiteral(" class=\"col\"");

WriteLiteral(">\r\n");

WriteLiteral("            ");

            
            #line 119 "..\..\Views\Medical\Plan.cshtml"
       Write(Html.DevExpress().Button(btn =>
       {
          btn.Name = "btnMedicalPlanAdd";
          btn.Text = T("Thêm");
          btn.Images.Image.IconID = IconID.ActionsAdd16x16;
          btn.Styles.Style.Paddings.Padding = 0;
          btn.RenderMode = ButtonRenderMode.Outline;
          btn.ClientSideEvents.Click = "onMedicalPlanAdd";
       }).GetHtml());

            
            #line default
            #line hidden
WriteLiteral("\r\n         </div>\r\n      </div>\r\n      <div");

WriteLiteral(" class=\"col-12\"");

WriteLiteral(">\r\n");

WriteLiteral("         ");

            
            #line 131 "..\..\Views\Medical\Plan.cshtml"
    Write(Html.DevExpress().GridView(st =>
    {
       st.Name = "grdMedicalPlan";
       st.Width = Unit.Percentage(100);
       st.SettingsEditing.Mode = GridViewEditingMode.Batch;
       st.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Cell;
       st.SettingsEditing.BatchEditSettings.ShowConfirmOnLosingChanges = false;
       st.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.FocusedCellClick;
       st.SettingsEditing.ShowModelErrorsForEditors = true;
       st.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
       st.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
       st.KeyFieldName = "Id";
       st.SettingsBehavior.AllowSort = false;
       st.SettingsEditing.NewItemRowPosition = GridViewNewItemRowPosition.Bottom;
       st.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
       st.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = WidthAdaptivity;
       if (WindowWidthType == WebApp.Constant.WindowWidth.WidthType.ExtraSmall)
          st.Settings.ShowColumnHeaders = false;

       st.CommandColumn.Visible = true;
       st.CommandColumn.Caption = " ";
       st.CommandColumn.ShowDeleteButton = true;
       st.CommandColumn.Width = 24;
       st.CommandColumn.VisibleIndex = 5;
       st.SettingsCommandButton.RenderMode = GridCommandButtonRenderMode.Link;
       st.SettingsCommandButton.DeleteButton.Text = " ";
       st.SettingsCommandButton.DeleteButton.Image.IconID = IconID.ActionsTrash16x16;
       st.SettingsCommandButton.RecoverButton.Text = " ";
       st.SettingsCommandButton.RecoverButton.Image.IconID = IconID.ActionsReset16x16office2013;

       st.Columns.Add(col =>
       {
          col.FieldName = "PlanDate";
          col.ColumnType = MVCxGridViewColumnType.DateEdit;
          col.PropertiesEdit.DisplayFormatString = "d";
          col.Caption = T("Ngày bắt đầu");
          col.Width = 120;
          col.EditorProperties().DateEdit(cmb =>
          {
             cmb.Width = Unit.Percentage(100);
             cmb.ValidationSettings.Display = Display.Dynamic;
             cmb.MinDate = Model.MinDate;
          });
       });
       st.Columns.Add(col =>
       {
          col.FieldName = "EndDate";
          col.ColumnType = MVCxGridViewColumnType.DateEdit;
          col.PropertiesEdit.DisplayFormatString = "d";
          col.Caption = T("Ngày kết thúc");
          col.Width = 120;
          col.EditorProperties().DateEdit(cmb =>
          {
             cmb.Width = Unit.Percentage(100);
             cmb.ValidationSettings.Display = Display.Dynamic;
             cmb.MinDate = Model.MinDate;
          });
       });
       st.Columns.Add(col =>
       {
          col.FieldName = "Doctor";
          col.ColumnType = MVCxGridViewColumnType.ComboBox;
          col.Caption = T("Cán bộ thực hiện");
          col.Width = 200;
          col.EditorProperties().ComboBox(cmb =>
          {
             cmb.ClientInstanceName = "cmbDoctor";
             cmb.Width = Unit.Percentage(100);
             cmb.ValidationSettings.Display = Display.Dynamic;
             cmb.ValueField = "Oid";
             cmb.ValueType = typeof(int);
             cmb.TextField = "Name";
             cmb.TextFormatString = "{0}";
             cmb.Columns.Add("Name", T("Họ và tên")).Width = 200;
             cmb.Columns.Add("Specialize", T("Lĩnh vực chuyên môn")).Width = 200;
             cmb.IncrementalFilteringDelay = 1000;
             cmb.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
             cmb.BindList(Model.GetDoctors());
          });
       });
       st.Columns.Add(col =>
       {
          col.FieldName = "Specialize";
          col.Caption = T("Lĩnh vực chuyên môn");
          col.Width = 200;
          col.ReadOnly = true;
          col.Settings.ShowEditorInBatchEditMode = false;
       });
       st.Columns.Add(col =>
       {
          col.FieldName = "Specifications";
          col.ColumnType = MVCxGridViewColumnType.TokenBox;
          col.Caption = T("Chỉ định kỹ thuật");
          col.EditorProperties().TokenBox(cmb =>
          {
             cmb.Width = Unit.Percentage(100);
             cmb.ValidationSettings.Display = Display.Dynamic;
             cmb.ValueSeparator = ';';
             cmb.BindList(Model.GetSpecifications());
             cmb.IncrementalFilteringDelay = 1000;
             cmb.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
          });
       });

       st.ClientSideEvents.BatchEditRowValidating = "grdMedicalPlanValidating";
       st.ClientSideEvents.BatchEditEndEditing = "grdMedicalPlanEndEditing";
    }).Bind(Model.Details).GetHtml());

            
            #line default
            #line hidden
WriteLiteral("\r\n      </div>\r\n      <div");

WriteLiteral(" class=\"col-12\"");

WriteLiteral(">");

            
            #line 239 "..\..\Views\Medical\Plan.cshtml"
                     Write(Html.EditorFor(m => m.PlanNote));

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n      <div");

WriteLiteral(" class=\"col-12\"");

WriteLiteral(">");

            
            #line 240 "..\..\Views\Medical\Plan.cshtml"
                     Write(Html.EditorFor(m => m.Doctors));

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n      <div");

WriteLiteral(" class=\"col-12\"");

WriteLiteral(">");

            
            #line 241 "..\..\Views\Medical\Plan.cshtml"
                     Write(Html.EditorFor(m => m.Attachments));

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n   </div>\r\n   <div>\r\n");

WriteLiteral("      ");

            
            #line 244 "..\..\Views\Medical\Plan.cshtml"
 Write(Html.DevExpress().Button(btn =>
{
 btn.Name = "MedicalPlanSave";
 btn.Text = T("Lưu thay đổi");
 btn.Images.Image.IconID = IconID.SaveSave16x16;
 btn.Styles.Style.Paddings.Padding = 0;
 btn.RenderMode = ButtonRenderMode.Outline;
 btn.ClientVisible = false;
 btn.ClientSideEvents.Click = "onMedicalPlanSave";
}).GetHtml());

            
            #line default
            #line hidden
WriteLiteral("\r\n   </div>\r\n\r\n</form>");

        }
    }
}
#pragma warning restore 1591
