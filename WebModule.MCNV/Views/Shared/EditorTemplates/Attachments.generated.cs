#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.UI.WebControls;
    using System.Web.WebPages;
    using DevExpress.Utils;
    using DevExpress.Web;
    using DevExpress.Web.ASPxThemes;
    using DevExpress.Web.Mvc;
    using DevExpress.Web.Mvc.UI;
    using WebModule.MCNV.Models;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Shared/EditorTemplates/Attachments.cshtml")]
    public partial class _Views_Shared_EditorTemplates_Attachments_cshtml_ : WebApp.Core.BaseWebViewPage<Attachments>
    {
        public _Views_Shared_EditorTemplates_Attachments_cshtml_()
        {
        }
        public override void Execute()
        {
WriteLiteral("<script");

WriteLiteral(" id=\"dxss_attachmentseditor\"");

WriteLiteral(">\r\n   var curRowEditing = null;\r\n   function onAttachmentUpload");

            
            #line 4 "..\..\Views\Shared\EditorTemplates\Attachments.cshtml"
                          Write(Model.Name);

            
            #line default
            #line hidden
WriteLiteral("(s, e) {\r\n      if (e.isValid) {\r\n         var res = JSON.parse(e.callbackData);\r" +
"\n         var api = AttachmentList");

            
            #line 7 "..\..\Views\Shared\EditorTemplates\Attachments.cshtml"
                             Write(Model.Name);

            
            #line default
            #line hidden
WriteLiteral(@".batchEditApi;
         api.AddNewRow();//add and received index
         if (curRowEditing === null) return;
         api.EndEdit();
         api.SetCellValue(curRowEditing, 'Name', res.Name, res.Name);
         api.SetCellValue(curRowEditing, 'Url', res.Url, '');
         curRowEditing = null;
      }
   }

   function onEditingAttachmentList");

            
            #line 17 "..\..\Views\Shared\EditorTemplates\Attachments.cshtml"
                               Write(Model.Name);

            
            #line default
            #line hidden
WriteLiteral("(s, e) {\r\n      curRowEditing = e.visibleIndex;\r\n   }\r\n\r\n   function downloadAtta" +
"chment");

            
            #line 21 "..\..\Views\Shared\EditorTemplates\Attachments.cshtml"
                          Write(Model.Name);

            
            #line default
            #line hidden
WriteLiteral("(id, saveas) {\r\n      window.open(\'");

            
            #line 22 "..\..\Views\Shared\EditorTemplates\Attachments.cshtml"
              Write(Url.Action("Viewer", "Attachment"));

            
            #line default
            #line hidden
WriteLiteral("/\' + id + \'?saveas=\' + saveas, \'_blank\');\r\n   }\r\n\r\n   function onChangedAttachmen" +
"tList");

            
            #line 25 "..\..\Views\Shared\EditorTemplates\Attachments.cshtml"
                               Write(Model.Name);

            
            #line default
            #line hidden
WriteLiteral("(s) {\r\n      if (s.onDataChanged) {\r\n         setTimeout(function () {\r\n         " +
"   s.onDataChanged(s.GetChanged());\r\n         }, 100);\r\n      }\r\n   }\r\n</script>" +
"\r\n<div");

WriteLiteral(" class=\"attachments-container\"");

WriteLiteral(">\r\n   <div");

WriteLiteral(" class=\"grid-middle-noBottom\"");

WriteLiteral(" style=\"margin-bottom: 5px;\"");

WriteLiteral(">\r\n      <div");

WriteLiteral(" class=\"col-auto\"");

WriteLiteral(" style=\"\"");

WriteLiteral(">\r\n");

WriteLiteral("         ");

            
            #line 36 "..\..\Views\Shared\EditorTemplates\Attachments.cshtml"
    Write(T("Tài liệu, hình ảnh, video"));

            
            #line default
            #line hidden
WriteLiteral("\r\n      </div>\r\n      <div");

WriteLiteral(" class=\"col\"");

WriteLiteral(">\r\n");

WriteLiteral("         ");

            
            #line 39 "..\..\Views\Shared\EditorTemplates\Attachments.cshtml"
    Write(Html.DevExpress().UploadControl(st =>
    {
       string name = "AttachmentUpload" + Model.Name;
       st.Name = name;
       st.Width = Unit.Percentage(100);
       st.CallbackRouteValues = new { Controller = "Attachment", Action = "Upload", UploaderName = name };
       st.ShowProgressPanel = true;
       st.UploadMode = UploadControlUploadMode.Auto;
       st.AutoStartUpload = true;
       st.AdvancedModeSettings.EnableMultiSelect = false;
       st.AdvancedModeSettings.EnableDragAndDrop = true;
       st.AdvancedModeSettings.EnableFileList = false;
       st.ValidationSettings.AllowedFileExtensions = Attachment.AllowedFileExtensions;
       st.ValidationSettings.MaxFileSize = Attachment.MaxFileSize;
       st.BrowseButton.Text = T("Thêm tài liệu");
       st.BrowseButton.Image.IconID = IconID.ActionsUpload16x16;
       st.Styles.BrowseButton.Paddings.Assign(new Paddings(5, 2, 5, 2));
       st.ShowTextBox = false;
       st.ValidationSettings.ShowErrors = false;
       st.ClientSideEvents.FileUploadComplete = "onAttachmentUpload" + Model.Name;
    }).GetHtml());

            
            #line default
            #line hidden
WriteLiteral("\r\n      </div>\r\n   </div>\r\n   <div");

WriteLiteral(" style=\"border-top: 1px solid #ccc;\"");

WriteLiteral(">\r\n");

WriteLiteral("      ");

            
            #line 63 "..\..\Views\Shared\EditorTemplates\Attachments.cshtml"
 Write(Html.DevExpress().GridView(st =>
 {
    st.Name = "AttachmentList" + Model.Name;
    st.Width = Unit.Percentage(100);
    st.SettingsEditing.Mode = GridViewEditingMode.Batch;
    st.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Cell;
    st.SettingsEditing.BatchEditSettings.ShowConfirmOnLosingChanges = false;
    st.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.FocusedCellClick;
    st.SettingsEditing.ShowModelErrorsForEditors = true;
    st.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
    st.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
    st.KeyFieldName = "Id";
    st.SettingsBehavior.AllowSort = false;
    st.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
    st.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = WidthAdaptivity;
    if (WindowWidthType == WebApp.Constant.WindowWidth.WidthType.ExtraSmall)
       st.Settings.ShowColumnHeaders = false;

    st.Columns.Add(col =>
    {
       col.FieldName = "Url";
       col.Settings.ShowEditorInBatchEditMode = false;
       col.ReadOnly = true;
       col.Width = 24;
       col.Caption = T("Loại");
       col.SetDataItemTemplateContent(c =>
       {
          var id = DataBinder.Eval(c.DataItem, "Id");
          if (id == null) return;
          Html.DevExpress().Button(btn =>
          {
             btn.Name = "AttachmentAction" + Model.Name + "_" + id.ToString();
             btn.Text = "";
             btn.RenderMode = ButtonRenderMode.Link;
             var type = (AttachmentType)Enum.Parse(typeof(AttachmentType), DataBinder.Eval(c.DataItem, "Type").ToString());
             if (type == AttachmentType.Image)
                btn.Images.Image.IconID = IconID.ContentImage16x16;
             else if (type == AttachmentType.Video)
                btn.Images.Image.IconID = IconID.MediaVideocontent16x16;
             else if (type == AttachmentType.Audio)
                btn.Images.Image.IconID = IconID.MediaAudiocontent16x16;
             else if (type == AttachmentType.PDF)
                btn.Images.Image.IconID = IconID.ExportExporttopdfSvg16x16;
             else
                btn.Images.Image.IconID = IconID.BusinessobjectsBofileattachment16x16;
             btn.ClientSideEvents.Click = string.Format("function(s,e) {{downloadAttachment{0}('{1}', '{2}');}}", Model.Name, DataBinder.Eval(c.DataItem, "UniqueId"), DataBinder.Eval(c.DataItem, "SaveAs"));
          }).Render();
       });
    });
    st.Columns.Add(c =>
    {
       c.FieldName = "DateCreate";
       c.Caption = T("Ngày tạo");
       c.Width = 100;
       c.ReadOnly = true;
       c.Settings.ShowEditorInBatchEditMode = false;
    });
    st.Columns.Add(c =>
    {
       c.FieldName = "UserCreate";
       c.Caption = T("Người tạo");
       c.Width = 120;
       c.ReadOnly = true;
       c.Settings.ShowEditorInBatchEditMode = false;
    });
    st.Columns.Add(c =>
    {
       c.FieldName = "Name";
       c.Caption = T("Tên tài liệu");
       c.EditorProperties().TextBox(txt =>
       {
          txt.ValidationSettings.Display = Display.None;
          txt.Style.Border.BorderWidth = 0;
          txt.Width = Unit.Percentage(100);
          txt.Height = Unit.Percentage(100);
       });
    });

    st.CommandColumn.Visible = true;
    st.CommandColumn.Caption = " ";
    st.CommandColumn.ShowDeleteButton = true;
    st.CommandColumn.Width = 24;
    st.CommandColumn.VisibleIndex = 4;
    st.SettingsCommandButton.RenderMode = GridCommandButtonRenderMode.Link;
    st.SettingsCommandButton.DeleteButton.Text = " ";
    st.SettingsCommandButton.DeleteButton.Image.IconID = IconID.ActionsTrash16x16;
    st.SettingsCommandButton.RecoverButton.Text = " ";
    st.SettingsCommandButton.RecoverButton.Image.IconID = IconID.ActionsReset16x16office2013;

    st.ClientSideEvents.BatchEditStartEditing = "onEditingAttachmentList" + Model.Name;
    st.ClientSideEvents.BatchEditEndEditing = "onChangedAttachmentList" + Model.Name;
    st.ClientSideEvents.BatchEditRowRecovering = "onChangedAttachmentList" + Model.Name;
    st.ClientSideEvents.BatchEditRowDeleting = "onChangedAttachmentList" + Model.Name;
 }).Bind(Model.Items).GetHtml());

            
            #line default
            #line hidden
WriteLiteral("\r\n   </div>\r\n\r\n</div>\r\n");

        }
    }
}
#pragma warning restore 1591
