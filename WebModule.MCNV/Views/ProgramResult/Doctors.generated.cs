#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.UI.WebControls;
    using System.Web.WebPages;
    using DevExpress.Utils;
    using DevExpress.Web;
    using DevExpress.Web.ASPxThemes;
    using DevExpress.Web.Mvc;
    using DevExpress.Web.Mvc.UI;
    using WebModule.MCNV.Models;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/ProgramResult/Doctors.cshtml")]
    public partial class _Views_ProgramResult_Doctors_cshtml : WebApp.Core.BaseWebViewPage<ProgramResult>
    {
        
        #line 2 "..\..\Views\ProgramResult\Doctors.cshtml"
            
   MVCxGridViewColumn ScoreColumn(string field, string caption)
   {
      var col = new MVCxGridViewColumn()
      {
         FieldName = field,
         Caption = caption,
         ColumnType = MVCxGridViewColumnType.SpinEdit,

      };
      col.EditorProperties().SpinEdit(txt =>
      {
         txt.Width = Unit.Percentage(100);
         txt.AllowNull = true;
         txt.ValidationSettings.Display = Display.Dynamic;
         txt.SpinButtons.ClientVisible = false;
         txt.NumberType = SpinEditNumberType.Float;
         txt.DecimalPlaces = 1;
         txt.DisplayFormatString = "#.#";
         txt.MinValue = 0;
         txt.MaxValue = 10;
      });
      return col;
   }

   MVCxGridViewColumn GASColumn(string field, string caption)
   {
      var col = new MVCxGridViewColumn()
      {
         FieldName = field,
         Caption = caption,
         ColumnType = MVCxGridViewColumnType.ComboBox,
      };
      col.EditorProperties().ComboBox(cmb =>
      {
         cmb.Width = Unit.Percentage(100);
         cmb.AllowNull = true;
         cmb.ValidationSettings.Display = Display.Dynamic;
         cmb.DropDownStyle = DropDownStyle.DropDownList;
         cmb.Items.Add("-2", -2);
         cmb.Items.Add("-1", -1);
         cmb.Items.Add("0", 0);
         cmb.Items.Add("1", 1);
         cmb.Items.Add("2", 2);
      });
      return col;
   }

        #line default
        #line hidden
        
        public _Views_ProgramResult_Doctors_cshtml()
        {
        }
        public override void Execute()
        {
            
            #line 50 "..\..\Views\ProgramResult\Doctors.cshtml"
Write(Html.DevExpress().GridView(st =>
{
   st.Name = "grdResult";
   st.Width = Unit.Percentage(100);
   st.SettingsEditing.Mode = GridViewEditingMode.Batch;
   st.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Cell;
   st.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.FocusedCellClick;
   st.SettingsEditing.BatchEditSettings.ShowConfirmOnLosingChanges = false;
   st.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
   st.SettingsEditing.ShowModelErrorsForEditors = true;
   st.KeyFieldName = "Id";
   st.CallbackRouteValues = new { Action = "Doctors", Program = Model.Id };
   st.SettingsSearchPanel.CustomEditorName = "SearchDoctor";
   st.SettingsBehavior.AutoExpandAllGroups = true;
   st.SettingsPager.Mode = GridViewPagerMode.EndlessPaging;
   st.SettingsEditing.BatchEditSettings.AllowValidationOnEndEdit = true;

   st.Toolbars.Add(toolbar =>
   {
      toolbar.Items.Add(tool =>
      {
         tool.BeginGroup = true;
         tool.Command = GridViewToolbarCommand.Custom;
         tool.SetTemplateContent(c =>
         {
            Html.DevExpress().TextBox(txt =>
            {
               txt.Name = "SearchDoctor";
               txt.Properties.NullText = T("Tìm kiếm");
               txt.Properties.NullTextDisplayMode = NullTextDisplayMode.UnfocusedAndFocused;
               txt.Properties.SelectInputTextOnClick = true;
            }).Render();
         });
      });
      toolbar.Items.Add(it =>
      {
         it.Name = "export";
         it.Text = T("Xuất sang Excel");
         it.Image.IconID = IconID.ExportExport16x16;
      });
      toolbar.Items.Add(tool =>
      {
         tool.Name = "close";
         tool.Text = T("Đóng");
         tool.Image.IconID = IconID.ActionsClose16x16;
         tool.ToolTip = T("Đóng chức năng này (ESC)");
         tool.Command = GridViewToolbarCommand.Custom;
      });
   });

   st.Columns.Add(col =>
   {
      col.FieldName = "FacilityName";
      col.Caption = T("Đơn vị");
      col.GroupIndex = 0;
   });
   st.Columns.Add(col =>
   {
      col.FieldName = "DoctorName";
      col.Caption = T("Họ và tên");
      col.ReadOnly = true;
      col.Settings.ShowEditorInBatchEditMode = false;
      col.Width = 200;
   });
   st.Columns.Add(col =>
   {
      col.FieldName = "Specialize";
      col.Caption = T("Lĩnh vực chuyên môn");
      col.ReadOnly = true;
      col.Settings.ShowEditorInBatchEditMode = false;
      col.Width = 150;
   });

   if (Model.ProgramType == ProgramTypeEnum.Coaching)
   {
      st.Columns.Add(ScoreColumn("Score1", T("Tháng thứ 1")));
      st.Columns.Add(ScoreColumn("Score2", T("Tháng thứ 2")));
      st.Columns.Add(ScoreColumn("Score3", T("Tháng thứ 3")));
      st.Columns.Add(ScoreColumn("Score4", T("Tháng thứ 4")));
      st.Columns.Add(ScoreColumn("Score5", T("Tháng thứ 5")));
      st.Columns.Add(ScoreColumn("Score6", T("Tháng thứ 6")));
      st.Columns.Add(ScoreColumn("Score7", T("Tháng thứ 7")));
      st.Columns.Add(ScoreColumn("Score8", T("Tháng thứ 8")));
      st.Columns.Add(ScoreColumn("Score9", T("Tháng thứ 9")));
      st.Columns.Add(ScoreColumn("Score10", T("Tháng thứ 10")));
      st.Columns.Add(ScoreColumn("Score11", T("Tháng thứ 11")));
      st.Columns.Add(ScoreColumn("Score12", T("Tháng thứ 12")));

      st.Columns.Add(GASColumn("Score13", T("GAS lần 1")));
      st.Columns.Add(GASColumn("Score14", T("GAS lần 2")));
      st.Columns.Add(GASColumn("Score15", T("GAS lần 3")));
      st.Columns.Add(GASColumn("Score16", T("GAS lần 4")));

      st.Columns.Add(col =>
      {
         col.FieldName = "HoursTotal";
         col.Caption = T("Số giờ đã học");
         col.ColumnType = MVCxGridViewColumnType.SpinEdit;
         col.Settings.ShowEditorInBatchEditMode = false;
         col.PropertiesEdit.DisplayFormatString = "#.#";
         col.ReadOnly = true;
      });
      st.Columns.Add(col =>
      {
         col.FieldName = "HoursLeft";
         col.Caption = T("Số giờ còn lại");
         col.ColumnType = MVCxGridViewColumnType.SpinEdit;
         col.Settings.ShowEditorInBatchEditMode = false;
         col.PropertiesEdit.DisplayFormatString = "#.#";
         col.ReadOnly = true;
      });

      st.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
      st.Columns["DoctorName"].FixedStyle = GridViewColumnFixedStyle.Left;

      st.ClientSideEvents.BatchEditEndEditing = "WebApp.function.updateHours";
   }

   if (Model.ProgramType == ProgramTypeEnum.ShortTime || Model.ProgramType == ProgramTypeEnum.LongTimeContinuous || Model.ProgramType == ProgramTypeEnum.LongTimeIntensive)
   {
      st.Columns.Add(ScoreColumn("Score1", T("Điểm đầu vào")));
      st.Columns.Add(ScoreColumn("Score2", T("Điểm đầu ra")));
      st.Columns.Add(col =>
      {
         col.FieldName = "Score3";
         col.Caption = T("% Cải thiện");
         col.ColumnType = MVCxGridViewColumnType.SpinEdit;
         col.Settings.ShowEditorInBatchEditMode = false;
         col.PropertiesEdit.DisplayFormatString = "#";
         col.ReadOnly = true;
      });
      st.ClientSideEvents.BatchEditEndEditing = "WebApp.function.updatePercent";
   }

   if (Model.ProgramType == ProgramTypeEnum.LongTimeLongTerm || Model.ProgramType == ProgramTypeEnum.LongTimeMidTerm)
   {
      var lt = st.Columns.AddBand(T("Điểm lý thuyết"));
      lt.Columns.Add(ScoreColumn("Score1", T("Học kỳ 1")));
      lt.Columns.Add(ScoreColumn("Score2", T("Học kỳ 2")));
      lt.Columns.Add(ScoreColumn("Score3", T("Học kỳ 3")));
      lt.Columns.Add(ScoreColumn("Score4", T("Điểm cuối khóa")));
      lt.Columns.Add(ScoreColumn("Score5", T("Điểm tổng kết")));

      var th = st.Columns.AddBand(T("Điểm thực hành"));
      th.Columns.Add(ScoreColumn("Score6", T("Học kỳ 1")));
      th.Columns.Add(ScoreColumn("Score7", T("Học kỳ 2")));
      th.Columns.Add(ScoreColumn("Score8", T("Học kỳ 3")));
      th.Columns.Add(ScoreColumn("Score9", T("Điểm cuối khóa")));
      th.Columns.Add(ScoreColumn("Score10", T("Điểm tổng kết")));

      st.ClientSideEvents.BatchEditEndEditing = "WebApp.function.resultEndEditing";
   }

   st.Columns.Add(col =>
   {
      col.FieldName = "Status";
      col.Caption = T("Đánh giá cuối kỳ");
      col.EditorProperties().ComboBox(cmb =>
      {
         cmb.Width = Unit.Percentage(100);
         cmb.ValueField = "Oid";
         cmb.ValueType = typeof(int);
         cmb.TextField = "Name";
         cmb.AllowNull = true;
         cmb.ValidationSettings.Display = Display.Dynamic;
         cmb.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
         cmb.BindList(TrainingStatus.ComboboxData());
      });
      col.Width = 120;
   });
   st.Columns.Add(col =>
   {
      col.FieldName = "ReasonCancel";
      col.Caption = T("Lý do nghỉ học");
      col.EditorProperties().TextBox(txt =>
      {
         txt.Width = Unit.Percentage(100);
         txt.ValidationSettings.Display = Display.Dynamic;
         txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
      });
      col.Width = 300;
   });

   st.ClientSideEvents.BatchEditRowValidating = "WebApp.function.resultValidating";

   st.ClientSideEvents.BatchEditStartEditing = "WebApp.function.resultStartEditing";

   st.ClientSideEvents.ToolbarItemClick = "function(s,e) {e.item.name && WebApp.function[e.item.name] && WebApp.function[e.item.name]();}";
   st.ClientSideEvents.Init = "function(s,e) {s.SetHeight($('.frmProgramResult').height());}";
}).Bind(Model.GetDoctors()).GetHtml());

            
            #line default
            #line hidden
WriteLiteral("\r\n");

        }
    }
}
#pragma warning restore 1591
